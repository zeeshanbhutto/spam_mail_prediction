# -*- coding: utf-8 -*-
"""Spam_mail_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z8QALSTzZ2q0MxdGGHA24w3wT_os8c3e
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the dat from the csv file to a pandas data frame
raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

#replace the null values with null string
mail_data=raw_mail_data.where(pd.notnull(raw_mail_data),'')

print(mail_data)

"""Data Preprocessing

"""

mail_data.head()

#number of rows and columns in the dataframe
mail_data.shape

#LAbel encoding
#label spam mail as 0 and ham mail as 1
mail_data.loc[mail_data['Category']=='spam','Category',]=0
mail_data.loc[mail_data['Category']=='ham','Category',]=1

mail_data.head()

#Separating the data as text and label
x=mail_data['Message']
y=mail_data['Category']
print(x)
print(y)

#splitting the data into training data and test data.
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=3)

print(x.shape)
print(x_train.shape)
print(x_test.shape)

"""**Feature Extraction**"""

feature_extraction = TfidfVectorizer(min_df=1,stop_words='english',lowercase=True)
x_train_features=feature_extraction.fit_transform(x_train)
x_test_features=feature_extraction.transform(x_test)

#convert y_train and y_test values as integers
y_train=y_train.astype('int')
y_test=y_test.astype('int')

print(x_train_features)

"""**Training the machine learning model Logistic regression**"""

model = LogisticRegression()

model.fit(x_train_features,y_train)

"""Evaluating the trained model"""

prediction_on_training_data=model.predict(x_train_features)
accuracy_on_training_data=accuracy_score(y_train,prediction_on_training_data)

print("Accuracy on training data :",accuracy_on_training_data)

prediction_on_test_data=model.predict(x_test_features)
accuracy_on_test_data=accuracy_score(y_test,prediction_on_test_data)

print("Accuracy on testing data :",accuracy_on_test_data)

"""**Building a predictive System**"""

input_mail=["I've been searching for the right words to thank you"]
#convert text to feature vectors
input_data_features=feature_extraction.transform(input_mail)
#making prediction
prediction=model.predict(input_data_features)
print(prediction)

if (prediction[0]==1):
   print("Ham mail")
else:
  print("Spam mail")